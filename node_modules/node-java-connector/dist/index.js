'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var findJavaHome = require("find-java-home");
var fs_1 = require("fs");
var constants_1 = require("./constants");
var helperFunctions_1 = require("./helperFunctions");
var path = require('path');
var fs = require('fs');
var tmpCrypto = require('crypto');
var tmpFetch = require('node-fetch');
var yauzl = require('yauzl');
var tar = require('tar');
/**
 * Installs a JRE copy for the app
 * @param {number} [version = 8] - Java Version (`8`/`9`/`10`/`11`/`12`)
 * @param {object} [options] - Installation Options
 * @param {string} [options.os] - Operating System (defaults to current) (`windows`/`mac`/`linux`/`solaris`/`aix`)
 * @param {string} [options.arch] - Architecture (defaults to current) (`x64`/`x32`/`ppc64`/`s390x`/`ppc64le`/`aarch64`/`sparcv9`)
 * @param {string} [options.openjdk_impl = hotspot] - OpenJDK Implementation (`hotspot`/`openj9`)
 * @param {string} [options.release = latest] - Release
 * @param {string} [options.type = jre] - Binary Type (`jre`/`jdk`)
 * @param {string} [options.heap_size] - Heap Size (`normal`/`large`)
 * @return Promise<string> - Resolves to the installation directory or rejects an error
 * @example
 * const njc = require('node-java-connector')
 *
 * // Use default options
 * njc.install()
 *   .then(dir => {
 *     // Do stuff
 *   })
 *   .catch(err => {
 *     // Handle the error
 *   })
 *
 * // or custom ones
 * njc.install(11, { os: 'aix', arch: 'ppc64', openjdk_impl: 'openj9' })
 *   .then(dir => {
 *     // Do stuff
 *   })
 *   .catch(err => {
 *     // Handle the error
 *   })
 */
function install(version, options) {
    if (version === void 0) { version = 8; }
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var javaHomeExists, _a, openjdk_impl, _b, release, _c, type, url, tmpdir;
        var _this = this;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    javaHomeExists = false;
                    return [4 /*yield*/, findJavaHome({ allowJre: true }, function (err, home) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                if (err)
                                    return [2 /*return*/, console.log(err)];
                                // Then we can just call "java" in the console
                                if (!!home && home !== "") {
                                    javaHomeExists = true;
                                }
                                return [2 /*return*/];
                            });
                        }); })];
                case 1:
                    _d.sent();
                    if (javaHomeExists)
                        return [2 /*return*/];
                    _a = options.openjdk_impl, openjdk_impl = _a === void 0 ? 'hotspot' : _a, _b = options.release, release = _b === void 0 ? 'latest' : _b, _c = options.type, type = _c === void 0 ? 'jre' : _c;
                    options = __assign(__assign({}, options), { openjdk_impl: openjdk_impl, release: release, type: type });
                    url = 'https://api.adoptopenjdk.net/v2/info/releases/openjdk' + version + '?';
                    if (!options.os) {
                        switch (process.platform) {
                            case 'aix':
                                options.os = 'aix';
                                break;
                            case 'darwin':
                                options.os = 'mac';
                                break;
                            case 'linux':
                                options.os = 'linux';
                                break;
                            case 'sunos':
                                options.os = 'solaris';
                                break;
                            case 'win32':
                                options.os = 'windows';
                                break;
                            default:
                                return [2 /*return*/, Promise.reject(new Error('Unsupported operating system'))];
                        }
                    }
                    if (!options.arch) {
                        if (/^ppc64|s390x|x32|x64$/g.test(process.arch))
                            options.arch = process.arch;
                        else if (process.arch === 'ia32')
                            options.arch = 'x32';
                        else
                            return [2 /*return*/, Promise.reject(new Error('Unsupported architecture'))];
                    }
                    Object.keys(options).forEach(function (key) { url += key + '=' + options[key] + '&'; });
                    tmpdir = path.join(__dirname, 'jre-key');
                    return [2 /*return*/, tmpFetch(url)
                            .then(function (response) { return response.json(); })
                            .then(function (json) { return downloadAll(tmpdir, json.binaries[0]['binary_link']); })
                            .then(verify)
                            .then(move)
                            .then(extract)];
            }
        });
    });
}
exports.install = install;
/**
 * Starts the jar at the given path
 *
 * @export
 * @param {string} jarPath path to the jar-file which should be executed
 * @param {string[]} [args] optional arguments that will be appended while executing
 * @returns {Promise<ChildProcess>}
 */
function executeJar(jarPath, args) {
    return __awaiter(this, void 0, void 0, function () {
        var javaCall, javaExists, argumentString, output;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    javaCall = "";
                    javaExists = false;
                    return [4 /*yield*/, findJavaHome({ allowJre: true }, function (err, home) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                if (err)
                                    return [2 /*return*/, console.log(err)];
                                // Then we can just call "java" in the console
                                if (!!home && home !== "") {
                                    javaExists = true;
                                    javaCall = "java";
                                }
                                return [2 /*return*/];
                            });
                        }); })];
                case 1:
                    _a.sent();
                    if (!javaExists) {
                        javaCall = getJavaString();
                    }
                    argumentString = !args ? "" : args.map(function (str) { return "'" + str + "'"; }).join(' ');
                    output = child_process_1.exec(javaCall + " -jar " + jarPath + " " + argumentString);
                    if (!!output.stderr) {
                        output.stderr.on("data", function (stderr) {
                            console.error("" + stderr);
                        });
                    }
                    return [2 /*return*/, output];
            }
        });
    });
}
exports.executeJar = executeJar;
function getJavaString() {
    var srcPath = path.join(path.resolve(__dirname), '../', constants_1.jrePath);
    var files = fs_1.readdirSync(srcPath);
    var file = files.filter(function (name) { return !name.startsWith("._"); });
    if (file.length > 1)
        throw Error("JRE installation failed! Please install the package again.");
    return path.join(srcPath, file[0], helperFunctions_1.getExecutable());
}
function createDir(dir) {
    return new Promise(function (resolve, reject) {
        fs.access(dir, function (err) {
            if (err && err.code === 'ENOENT') {
                fs.mkdir(dir, function (err) {
                    if (err)
                        reject(err);
                    resolve();
                });
            }
            else if (!err)
                resolve();
            else
                reject(err);
        });
    });
}
function download(dir, url) {
    return new Promise(function (resolve, reject) {
        createDir(dir)
            .then(function () { return tmpFetch(url); })
            .then(function (response) {
            var destFile = path.join(dir, path.basename(url));
            var destStream = fs.createWriteStream(destFile);
            response.body.pipe(destStream).on('finish', function () { return resolve(destFile); });
        })
            .catch(function (err) { return reject(err); });
    });
}
function downloadAll(dir, url) {
    return download(dir, url + '.sha256.txt').then(function () { return download(dir, url); });
}
function genChecksum(file) {
    return new Promise(function (resolve, reject) {
        fs.readFile(file, function (err, data) {
            if (err)
                reject(err);
            resolve(tmpCrypto
                .createHash('sha256')
                .update(data)
                .digest('hex'));
        });
    });
}
function verify(file) {
    return new Promise(function (resolve, reject) {
        fs.readFile(file + '.sha256.txt', 'utf-8', function (err, data) {
            if (err)
                reject(err);
            genChecksum(file).then(function (checksum) {
                checksum === data.split('  ')[0]
                    ? resolve(file)
                    : reject(new Error('File and checksum don\'t match'));
            });
        });
    });
}
function move(file) {
    return new Promise(function (resolve, reject) {
        var newFile = path.join(__dirname, file.split(path.sep).slice(-1)[0]);
        fs.copyFile(file, newFile, function (err) {
            if (err)
                reject(err);
            fs.unlink(file, function (err) {
                if (err)
                    reject(err);
                resolve(newFile);
            });
        });
    });
}
function extractZip(file, dir) {
    return new Promise(function (resolve, reject) {
        yauzl.open(file, { lazyEntries: true }, function (err, zipFile) {
            if (err)
                reject(err);
            zipFile.readEntry();
            zipFile.on('entry', function (entry) {
                var entryPath = path.join(dir, entry.fileName);
                if (/\/$/.test(entry.fileName)) {
                    fs.mkdir(entryPath, { recursive: true }, function (err) {
                        if (err && err.code !== 'EEXIST')
                            reject(err);
                        zipFile.readEntry();
                    });
                }
                else {
                    zipFile.openReadStream(entry, function (err, readStream) {
                        if (err)
                            reject(err);
                        readStream.on('end', function () {
                            zipFile.readEntry();
                        });
                        readStream.pipe(fs.createWriteStream(entryPath));
                    });
                }
            });
            zipFile.once('close', function () {
                fs.unlink(file, function (err) {
                    if (err)
                        reject(err);
                    resolve(dir);
                });
            });
        });
    });
}
function extractTarGz(file, dir) {
    return tar.x({ file: file, cwd: dir }).then(function () {
        return new Promise(function (resolve, reject) {
            fs.unlink(file, function (err) {
                if (err)
                    reject(err);
                resolve(dir);
            });
        });
    });
}
function extract(file) {
    var dir = path.join(path.dirname(__dirname), constants_1.jrePath);
    return createDir(dir).then(function () {
        return path.extname(file) === '.zip'
            ? extractZip(file, dir)
            : extractTarGz(file, dir);
    });
}
//# sourceMappingURL=index.js.map